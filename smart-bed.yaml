substitutions:
  device_name: smart-bed
  friendly_name: Smart Bed
  location: My Room

esphome:
  name: "${device_name}"
  friendly_name: "${friendly_name}"

esp32:
  board: nodemcu-32s
  framework:
    type: arduino

logger:
captive_portal:

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_encryption_key

# Ota (over the air updates)
ota:
  password: !secret ota_password

# Wifi
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${friendly_name} Fallback Hotspot"
    password: !secret recovery_ap_password

# Output Config
output:
  - platform: gpio
    pin: GPIO23
    id: wifi_status_led
  - platform: gpio
    pin: GPIO32
    id: relay_head_up
  - platform: gpio
    pin: GPIO33
    id: relay_head_down
  - platform: gpio
    pin: GPIO25
    id: relay_legs_up
  - platform: gpio
    pin: GPIO26
    id: relay_legs_down


# These switches can be used to troubleshoot if the covers are not working correctly
# Switches are also configured to be internal only so they are not exposed to Home Assistant
switch:
  - platform: output
    id: head_up
    name: "Head Up"
    output: relay_head_up
    internal: true
  - platform: output
    id: head_down
    name: "Head Down"
    output: relay_head_down
    internal: true
  - platform: output
    id: legs_up
    name: "Legs Up"
    output: relay_legs_up
    internal: true
  - platform: output
    id: legs_down
    name: "Legs Down"
    output: relay_legs_down
    internal: true

# Configuring covers to make them manage 
cover:
  - platform: time_based
    name: "Head"
    id: head_cover
    open_action:
      - switch.turn_on: head_up
    open_duration: 33s
    close_action:
      - switch.turn_on: head_down
    close_duration: 25s
    stop_action:
      - switch.turn_off: head_up
      - switch.turn_off: head_down
  - platform: time_based
    name: "Legs"
    id: legs_cover
    open_action:
      - switch.turn_on: legs_up
    open_duration: 25s
    close_action:
      - switch.turn_on: legs_down
    close_duration: 25s
    stop_action:
      - switch.turn_off: legs_up
      - switch.turn_off: legs_down


# Check the wifi status and turn on/off the wifi status LED
interval:
  - interval: 1s
    then:
      if:
        condition:
          wifi.connected:
        then:
          - output.turn_on: wifi_status_led
        else:
          - output.turn_off: wifi_status_led
